.. _dm-devices:

设备扩展
==========

此部分主要介绍顶点云设备管理系统服务器默认支持的设备，以及如何针对新的实体设备做扩展。

.. _dm-control-send:

命令发送
------------

对远程设备的控制通过和远程设备上运行的监控程序交互实现，服务器和远程设备的通信通过新建一个线程向远程设备发送自定义协议格式的数据包来完成。

线程 `RequestThread` 用于实现这一功能，它位于 `app/models.py` 中，每次执行只发送作为参数传入的 JSON 格式数据。具体发送格式如下：

+---------------------------+----------------------------+
| 使用 struct 打包消息长度  | 消息体，使用 pickle 打包   |
+---------------------------+----------------------------+

远程设备上运行的监控程序有一个监听线程用于监听进入的连接请求，并将其转发到对应设备上。具体的远端设备如何实现请看 :ref:`dm-client` 。

.. _dm-basic-devices:

基本设备
------------

文件 `app/models.py` 中定义了设备的基类，每个设备都拥有如 :ref:`dm-models-device` 中描述的方法，以及 `dm-models-database-devices` 中描述的基本属性。

下面对其中几个方法加以说明。

* `setup()` 和 `shutdown()` ：对远程设备执行开/关指令，它们会使用 `RequestThread` 发送 JSON 格式的数据包，数据包中分别包含 `setup : 1` 或者 `shutdown : 1` 。
* `getStatus()` ：获取设备在服务器存储的最近一次的状态，以字典形式返回。
* `updateStatus(status)` ：对于基类中的此方法而言，传入的 `status` 是一个字典格式的数据，基类通过这个字典来更新所有设备都具有的信息；对于子类而言（具体设备），传入的 `status` 是一个字符序列化的 JSON 格式数据，可以将其转化为 JSON 对象，并通过父类方法设置公有的状态，再细化自身的属性。
* `verifyStatus(status)` ：传入的是一个字典，设备将自身当前状态和字典中的项对比，如果相同则返回 `True` ，否则返回 `False` 。此函数的作用在于用户误设置设备时，如果设备状态未变更则不向远端设备发送消息，减轻远端设备负担。
* `setStatus(jsondata)` ：传入的是一个字符序列化的 JSON 对象，这个 JSON 对象只包含了需要修改的项的值。 `setStatus` 函数会将空缺项补全为当前状态，并通过 `RequestThread` 发送给远端设备，命令远端设备更新。

.. _dm-basic-bulb:

照明设备
-------------

下面以照明设备为例，就每个具体方法分别介绍子类设备具体如何实现。

照明设备为类 `Bulb` ，定义在文件 `app/devices.py` 中。照明设备扩展了两个字段：亮度等级和灯光饱和度，并且其开/关指令的发送只需要复用父类方法。

* `getStatus()` ：首先调用父类的 `getStatus` 函数获得基本属性字典，之后向字典中添加项 `lightDegree` 和 `full` ，分别代表灯光亮度等级和饱和度。返回新字典。此函数位于 `app/devices.py` 的第 25 行。

* `updateStatus(status)` ：首先通过 `json.loads()` 加载 JSON 对象，之后调用父类的 `updateStatus()` 方法更新基本属性。最后从 JSON 对象中提取 `lightDegree` 和 `full` 属性，检查并更新提取成功的项，忽略不存在的项或非法项。此函数位于 `app/devices.py` 的第 32 行。

* `verifyStatus(status)` ：首先通过父类的 `verifyStatus` 判断基本属性是否有改动，之后再就具体的 `lightDegree` 和 `full` 提取并判断。

* `setStatus(jsondata)` ：与父类方法基本相同，但发送给远端设备的 JSON 对象中增加了 `lightDegree` 和 `full` 属性。此函数位于 `app/devices.py` 的第 79 行。

其他设备
-------------

默认的顶点云设备管理系统支持模拟照明、模拟空调、模拟电视和实体 PC。

* 模拟照明：类 `Bulb` 
* 模拟电视：类 `TV`
* 模拟空调：类 `Air`
* 实体 PC： 类 `PC`

接下来请您阅读 :ref:`dm-client` 。